/* eslint-disable no-console */
import { renderToString } from 'react-dom/server';
import thunk from 'redux-thunk';

import fs from 'fs';
import path from 'path';

import React from 'react';
import { createStore, applyMiddleware } from 'redux';
import { Provider as ReduxStoreProvider } from 'react-redux';
import { ChunkExtractor } from '@loadable/server';
import reducer from '../src/state/reducers';
import App from '../src/containers/App';

import {
  LIGHT_THEME, DARK_THEME, COOKIE_POLICY_ACCEPTED, COOKIE_POLICY
} from '../src/state/actions/constants';
import fetchContent from '../src/state/actions/fetchContent';

const renderFullPage = ({
  res,
  html,
  context,
  preloadedState,
  linkTags,
  scriptTags,
  styleTags
}) => {
  fs.readFile(path.resolve(__dirname, '../dist/client/template.html'), 'utf-8', (err, data) => {
    if (err) {
      console.log(err);
      return res.status(500).send('Some error happened');
    }

    const state = JSON.stringify(preloadedState).replace(/</g, '\\u003c');

    const templateSubstitution = data.replace(
      '<div id="app"></div>',
      `<div id="app">${html}</div>
      <script>
        window.__PRELOADED_STATE__ = ${state}
      </script>`
    ).replace('</head>', `
    ${linkTags}
    ${styleTags}
    </head>
    `).replace('</body>', `${scriptTags}</body>`);

    res.set('content-type', 'text/html');
    return res.status(context.statusCode).send(templateSubstitution);
  });
};

const handleRender = async ({ cookies, url }, res) => {
  /*
    Create a new Redux store instance.

    We are still setting the theme and checkbox state based on the cookies sent to the server.
    We'll also not show the cookie disclaimer popup if the user has previously accepted it.

    The navigation is closed by default.
  */

  const context = { statusCode: 200 };

  const initialState = {
    sections: {
      sectionsContentFetched: false,
      sections: {}
    },
    theme: {
      theme: cookies.theme || LIGHT_THEME,
      checkBoxChecked: cookies.theme === DARK_THEME
    },
    cookieDisclaimer: {
      showCookiePopup: cookies[COOKIE_POLICY] !== COOKIE_POLICY_ACCEPTED,
      showLearnMore: false
    },
    navigation: {
      showSideNav: false
    },
    serverOnly: {
      location: url,
      context
    }
  };

  const store = createStore(reducer, initialState, applyMiddleware(thunk));

  await fetchContent()(store.dispatch);

  // This is the stats file generated by the webpack loadable plugin
  const statsFile = path.resolve(__dirname, '../dist/client/loadable-stats.json');

  const extractor = new ChunkExtractor({ statsFile });

  const jsx = extractor.collectChunks(
    <ReduxStoreProvider store={store}>
      <App />
    </ReduxStoreProvider>
  );

  // Render the component to a string
  const html = renderToString(jsx);

  const linkTags = extractor.getLinkTags();
  const scriptTags = extractor.getScriptTags();
  const styleTags = extractor.getStyleTags();

  // Grab the initial state from our Redux store
  const preloadedState = store.getState();

  console.log('server: ', preloadedState);

  renderFullPage({
    html,
    preloadedState,
    res,
    context,
    linkTags,
    scriptTags,
    styleTags
  });
};

export default handleRender;
